AWSTemplateFormatVersion: '2010-09-09'
Description: 'AllSenses MVP-1 - Minimal API'

Resources:
  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function - AudioProcessorFunction
  AudioProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AudioProcessorFunction
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              logger.info(f"AllSenses MVP-1 received: {json.dumps(event)}")
              
              try:
                  # Parse input
                  if 'body' in event:
                      body = json.loads(event['body']) if isinstance(event['body'], str) else event['body']
                  else:
                      body = event
                  
                  # Simple response for MVP-1
                  response_data = {
                      'status': 'success',
                      'message': 'AllSenses MVP-1 API is working',
                      'received': body,
                      'timestamp': context.aws_request_id
                  }
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'OPTIONS,POST',
                          'Content-Type': 'application/json'
                      },
                      'body': json.dumps(response_data)
                  }
                  
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Content-Type': 'application/json'
                      },
                      'body': json.dumps({
                          'status': 'error',
                          'message': str(e)
                      })
                  }

  # API Gateway REST API
  AllSensesApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AllSenses-MVP1-API
      Description: AllSenses MVP-1 Minimal API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource for /ingest
  IngestResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AllSensesApi
      ParentId: !GetAtt AllSensesApi.RootResourceId
      PathPart: ingest

  # POST Method for /ingest
  IngestPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AllSensesApi
      ResourceId: !Ref IngestResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AudioProcessorFunction.Arn}/invocations'

  # OPTIONS Method for CORS
  IngestOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AllSensesApi
      ResourceId: !Ref IngestResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Lambda Permission for API Gateway
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AudioProcessorFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AllSensesApi}/*/*'

  # API Deployment with stage name 'prod'
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - IngestPostMethod
      - IngestOptionsMethod
    Properties:
      RestApiId: !Ref AllSensesApi
      StageName: prod

Outputs:
  InvokeUrl:
    Description: 'AllSenses MVP-1 API Invoke URL'
    Value: !Sub 'https://${AllSensesApi}.execute-api.${AWS::Region}.amazonaws.com/prod/ingest'
    Export:
      Name: !Sub '${AWS::StackName}-InvokeUrl'

  LambdaFunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref AudioProcessorFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'