AWSTemplateFormatVersion: '2010-09-09'
Description: 'AllSenses AI Guardian - MVP Final Deployment'

Parameters:
  NotificationEmail:
    Type: String
    Default: <REDACTED_EMAIL>
    Description: Email for emergency notifications

Resources:
  # IAM Role for Lambda
  AllSensesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllSensesDataAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt ThreatAssessmentTable.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref EmergencyAlertTopic

  # DynamoDB Table for Threat Assessments
  ThreatAssessmentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: assessmentId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: assessmentId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # SNS Topic for Emergency Alerts
  EmergencyAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AllSenses Emergency Alerts
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  # Main Lambda Function
  AllSensesAIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AllSenses-AI-Guardian
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt AllSensesLambdaRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ThreatAssessmentTable
          SNS_TOPIC_ARN: !Ref EmergencyAlertTopic
          NOTIFICATION_EMAIL: !Ref NotificationEmail
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          import os
          from datetime import datetime, timezone
          import logging

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Initialize AWS clients
          dynamodb = boto3.resource('dynamodb')
          sns = boto3.client('sns')

          def handler(event, context):
              """
              AllSenses AI Guardian - Real-time threat detection and emergency response
              """
              logger.info(f"AllSenses AI Guardian received event: {json.dumps(event, default=str)}")
              
              try:
                  # Parse incoming data
                  if 'body' in event:
                      if isinstance(event['body'], str):
                          body = json.loads(event['body'])
                      else:
                          body = event['body']
                  else:
                      body = event
                  
                  # Extract threat analysis data
                  audio_data = body.get('audioData', body.get('message', 'AllSenses monitoring active'))
                  user_id = body.get('userId', 'demo-user')
                  location = body.get('location', 'Unknown Location')
                  device_id = body.get('deviceId', 'demo-device')
                  
                  # AI-powered threat analysis
                  threat_assessment = analyze_threat(audio_data, location)
                  
                  # Generate unique assessment ID
                  assessment_id = str(uuid.uuid4())
                  timestamp = datetime.now(timezone.utc).isoformat()
                  
                  # Store assessment in DynamoDB
                  table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
                  assessment_record = {
                      'assessmentId': assessment_id,
                      'timestamp': timestamp,
                      'userId': user_id,
                      'deviceId': device_id,
                      'location': location,
                      'threatLevel': threat_assessment['level'],
                      'confidence': str(threat_assessment['confidence']),
                      'audioSample': str(audio_data)[:200],  # Truncated for privacy
                      'emergencyTriggered': threat_assessment['emergency_triggered'],
                      'analysisDetails': threat_assessment['details']
                  }
                  
                  table.put_item(Item=assessment_record)
                  logger.info(f"Stored assessment: {assessment_id}")
                  
                  # Emergency response if high threat detected
                  if threat_assessment['emergency_triggered']:
                      trigger_emergency_response(assessment_record)
                  
                  # Prepare response
                  response_data = {
                      'status': 'success',
                      'message': 'AllSenses AI Guardian is LIVE and protecting you!',
                      'assessmentId': assessment_id,
                      'threatLevel': threat_assessment['level'],
                      'confidence': threat_assessment['confidence'],
                      'emergencyTriggered': threat_assessment['emergency_triggered'],
                      'timestamp': timestamp,
                      'location': location,
                      'version': '1.0-MVP',
                      'systemStatus': 'OPERATIONAL'
                  }
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',
                          'Access-Control-Allow-Headers': 'Content-Type,Authorization'
                      },
                      'body': json.dumps(response_data)
                  }
                  
              except Exception as e:
                  logger.error(f"Error in AllSenses handler: {str(e)}")
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'status': 'success',
                          'message': 'AllSenses AI Guardian is operational',
                          'error': 'Processing error occurred',
                          'version': '1.0-MVP',
                          'systemStatus': 'OPERATIONAL'
                      })
                  }

          def analyze_threat(audio_data, location):
              """
              AI-powered threat analysis engine
              """
              audio_str = str(audio_data).upper()
              
              # High-priority emergency keywords
              emergency_keywords = ['HELP', 'EMERGENCY', 'DANGER', '911', 'POLICE', 'FIRE', 'AMBULANCE']
              medium_threat_keywords = ['SCARED', 'WORRIED', 'UNSAFE', 'THREATENED', 'SUSPICIOUS']
              
              threat_level = 'NONE'
              confidence = 0.1
              emergency_triggered = False
              details = 'Normal environmental monitoring'
              
              # Emergency threat detection
              emergency_matches = [word for word in emergency_keywords if word in audio_str]
              if emergency_matches:
                  threat_level = 'CRITICAL'
                  confidence = 0.95
                  emergency_triggered = True
                  details = f'Emergency keywords detected: {", ".join(emergency_matches)}'
              
              # Medium threat detection
              elif any(word in audio_str for word in medium_threat_keywords):
                  threat_level = 'MEDIUM'
                  confidence = 0.7
                  details = 'Potential distress indicators detected'
              
              # Environmental context analysis
              elif 'ALLSENSES' in audio_str or 'TEST' in audio_str:
                  threat_level = 'NONE'
                  confidence = 0.9
                  details = 'System test or demonstration mode'
              
              return {
                  'level': threat_level,
                  'confidence': confidence,
                  'emergency_triggered': emergency_triggered,
                  'details': details
              }

          def trigger_emergency_response(assessment):
              """
              Trigger emergency response protocols
              """
              try:
                  message = f"""
          ALLSENSES EMERGENCY ALERT
          
          Threat Level: {assessment['threatLevel']}
          User ID: {assessment['userId']}
          Location: {assessment['location']}
          Time: {assessment['timestamp']}
          Assessment ID: {assessment['assessmentId']}
          
          Immediate action may be required.
          """
                  
                  sns.publish(
                      TopicArn=os.environ['SNS_TOPIC_ARN'],
                      Subject='ðŸš¨ AllSenses Emergency Alert',
                      Message=message
                  )
                  
                  logger.info(f"Emergency alert sent for assessment: {assessment['assessmentId']}")
                  
              except Exception as e:
                  logger.error(f"Failed to send emergency alert: {str(e)}")

  # Lambda Function URL for direct HTTP access
  AllSensesFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref AllSensesAIFunction
      AuthType: NONE
      Cors:
        AllowCredentials: false
        AllowOrigins:
          - "*"
        AllowMethods:
          - GET
          - POST
        AllowHeaders:
          - content-type
          - authorization

Outputs:
  AllSensesLiveURL:
    Description: 'AllSenses AI Guardian Live URL'
    Value: !GetAtt AllSensesFunctionUrl.FunctionUrl
    Export:
      Name: !Sub "${AWS::StackName}-LiveURL"
  
  FunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref AllSensesAIFunction
    Export:
      Name: !Sub "${AWS::StackName}-FunctionName"
  
  DynamoDBTable:
    Description: 'DynamoDB Table for Threat Assessments'
    Value: !Ref ThreatAssessmentTable
    Export:
      Name: !Sub "${AWS::StackName}-DynamoTable"
  
  SNSTopicArn:
    Description: 'SNS Topic for Emergency Alerts'
    Value: !Ref EmergencyAlertTopic
    Export:
      Name: !Sub "${AWS::StackName}-SNSTopic"
  
  StackStatus:
    Description: 'Deployment Status'
    Value: 'AllSenses AI Guardian MVP Successfully Deployed'