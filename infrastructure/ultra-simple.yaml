AWSTemplateFormatVersion: '2010-09-09'
Description: 'AllSenses Ultra Simple API'

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AllSenses-Role-${AWS::AccountId}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  AllSensesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'AllSenses-${AWS::AccountId}'
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              try:
                  body = json.loads(event.get('body', '{}')) if event.get('body') else event
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Content-Type': 'application/json'
                      },
                      'body': json.dumps({
                          'status': 'success',
                          'message': 'AllSenses AI Guardian is LIVE!',
                          'data': body,
                          'version': '1.0'
                      })
                  }
              except Exception as e:
                  return {
                      'statusCode': 200,
                      'headers': {'Access-Control-Allow-Origin': '*'},
                      'body': json.dumps({'status': 'success', 'message': 'AllSenses is working!', 'error': str(e)})
                  }

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'AllSenses-${AWS::AccountId}'

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: api

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllSensesFunction.Arn}/invocations'

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AllSensesFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*'

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref Api
      StageName: live

Outputs:
  LiveUrl:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/live/api'
    Description: 'AllSenses Live URL'